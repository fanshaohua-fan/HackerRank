using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class MaxSubsetSum {
    // static int maxN;
    static public Dictionary<int, int> dict;
    static public Dictionary<int, int> maxSum;
    // Complete the maxSubsetSum function below.
    static int maxSubsetSum(int[] arr) {
        // int result;

        
        dict = new Dictionary<int, int>();
        dict[0] = arr[0];
        for (var i = 1; i < arr.Length; i++)
        {
            dict[i] = Math.Max(dict[i-1], arr[i]);
        }

        maxSum = new Dictionary<int, int>();
        maxSum[0] = 0;
        maxSum[1] = 0;

        for(var n = 2; n < arr.Length; n++)
        {
            int maxN_2 = dict[n - 2];
            int valueN = arr[n];
                        
            // 1. Sum(N-1)
            var value_1 = maxSum[n-1];

            // 2. Sum(N-2) + valueN
            var value_2 = maxSum[n-2] + valueN;

            // 3. Max(N-2) + valueN
            var value_3 = maxN_2 + valueN;

            var max = Math.Max(Math.Max(value_1, value_2), value_3);
            maxSum[n] = max;
        }

        // if(n < 2){
        //     result = 0;
        // }
        // else if(n == 2)
        // {
        //     result = arr[0] + arr[2];
        // }
        // else
        // {
        //     int maxN_2 = dict[n - 2];
        //     int valueN = arr[n];
                        
        //     // 1. Sum(N-1)
        //     Array.Resize(ref arr, arr.Length - 1);
        //     var value_1 = maxSubsetSum(arr);

        //     // 2. Sum(N-2) + valueN
        //     Array.Resize(ref arr, arr.Length - 1);
        //     var value_2 = maxSubsetSum(arr) + valueN;

        //     // 3. Max(N-2) + valueN
        //     var value_3 = maxN_2 + valueN;

        //     result = value_2 > value_3 ? value_2 : value_3;
        //     result = value_1 > result ? value_1 : result;
        // }

        return maxSum[arr.Length-1];
    }

    // static void Main(string[] args) {

    //     // int[] arr = Array.ConvertAll("3 7 4 6 5 -17".Split(' '), arrTemp => Convert.ToInt32(arrTemp))
    //     // int[] arr = Array.ConvertAll("2 1 5 8 4".Split(' '), arrTemp => Convert.ToInt32(arrTemp))
    //     int[] arr = Array.ConvertAll("3 5 -7 8 10".Split(' '), arrTemp => Convert.ToInt32(arrTemp))
    //     // int[] arr = Array.ConvertAll("8006 -3505 -2450 -2399 -3423 8968 -2026 -3762 3229 3390 -3828 5507 -2903 -2470 -3401 5498 6049 3255 -8092 -7729 -2931 6551 7783 -6123 -9318 8957 3579 8273 2638 -873 3781 -8003 455 -6280 1040 -9453 4379 4149 9735 9034 -9089 -1941 1876 -1900 -9059 3968 -8922 -2904 -2690 -1925 5273 2447 496 -8582 -2378 8706 7543 6283 -8924 283 813 -6293 8367 -8016 -5188 1499 -4131 -9323 -2266 6034 6523 8480 -3196 -5837 -1104 -6302 1509 111 -3626 -8468 -5404 7108 -1438 -1999 7288 -2042 863 8049 5994 -9020 -4275 6070 7432 -5967 6470 -4189 8211 9938 8815 -3876 2849 8499 1788 6074 -5297 1769 -3850 -2356 -1967 -8392 -4927 -8451 -5388 -5847 209 -4473 3422 2510 -2295 -5688 9659 -939 -2563 -6947 -5961 7587 5762 -7247 -8631 4228 -3354 539 9437 2377 -846 407 -3334 3594 8340 7605 5098 -2785 -8596 -9523 3387 183 -6695 9774 4787 -6971 2453 -8509 4000 -5606 3918 6445 3604 958 -6668 -5854 8210 8984 -2828 1608 -4276 -9250 -5011 -2539 5355 1282 -8854 6203 -3549 7472 -7823 -1841 9686 6162 -7220 2450 -7542 -3379 3562 8385 -4859 5615 4033 -9354 245 6026 -9004 -8739 8425 2226 1079 -8023 -2287 1456 -4482 1988 6457 9945 1212 8875 1213 -3172 -5181 -5354 -5651 4878 -5083 -792 -2775 7177 -809 9507 -6687 -9835 -1353 9388 2473 1359 -6819 7029 -6024 -6375 7040 -8037 -5493 -6573 -5346 -7241 3528 1463 5241 5760 -9228 6369 8254 6271 -9442 -3262 -2817 -4658 -8270 6611 7862 4093 -971 -1759 5144 -6805 -2617 -1068 -5135 2903 2599 -9216 -5893 9967 2076 -5270 -5261 -262 -7440 9267 -1765 -5278 -2176 -4125 2351 6629 -6593 2976 8153 6986 -3157 3103 755 -8139 -7611 -708 -9660 -9844 -7353 191 9841 -5548 -4194 2796 -9466 5182 -4599 486 9906 4555 -93 -854 -5968 -1810 3052 3062 229 1959 7770 -4319 -9586 -5151 -4843 2801 4339 -5527 6119 1402 2130 5796 -9642 6858 -9926 -1359 9062 -7616 3345 -7945 -5363 1939 -1335 -8478 -9680 -533 1691 -7678 379 -4869 -5343 1467 4107 4546 -6181 6612 -5017 -9006 8084 -2306 -6558 5222 -5885 -8437 4081 7778 5562 3584 -6007 7451 -4322 1118 -6252 125 -9391 -415 6860 4759 -4625 4271 12 -2696 -4921 1328 6025 9508 -4749 -3337 6107 -788 -4483 1670 -9406 9275 -3694 379 -1572 1147 4029 -7482 5322 1686 -2030 -4419 -3062 9128 531 -5594 8210 1229 -1635 -1928 7963 9694 7413 -8959 -3177 -8968 240 -9928 5629 2677 819 -3226 -6603 9676 3441 -9195 4076 538 -5673 -4067 8698 5417 2434 -1251 3612 -6144 8577 -834 -6499 -4214 8986 -4084 817 -7002 6996 176 9163 1604 8795 6963 -713 1886 1732 -6086 -518 -4894 -3453 9500 -3330 4363 5711 -9439 -4331 -4490 -9973 -8303 5020 -104 2337 -235 -5323 4544 -3542 -2091 -400 8024 -9095 3243 8923 5989 6808 7173 -4915 7349 8037 2659 2396 7474 -9444 2870 -3 9090 -2265 -3582 2112 2776 -9966 -1876 3613 -6010 6754 -901 3898 -5464 8592 -1606 -7166 -6302 -705 5734 -2331 84 -5927 3075 5758 -385 -336 -5299 -4930 -1885 5065 6182 -555 3109 -4390 -9704 -6515 -930 -5098 -975 4358 -1390 2776 -527 -3411 6488 5477 -941 -1813 1630 7388 9708 2123 2482 9818 -5106 -522 7823 6344 1906 9614 9090 -9778 -1282 -1481 -2994 -6564 -428 4287 1363 3596 -9433 5425 4011 3843 -3352 -7787 618 -7871 -9287 -2540 -3842 -3590 4460 -5763 -3286 6527 -2845 -5586 -7174 9373 -659 -6839 7442 4699 5175 4263 -6679 2481 7637 4751 8169 -1228 8408 -7310 46 -7378 -3636 5505 2727 -5564 7944 -9941 -380 -4524 3432 1445 -9046 2944 -7752 422 4971 1709 7558 3786 -5142 -563 9166 4456 -8827 926 8247 4877 -3247 -1822 504 -5691 492 5085 -7328 2966 -5298 8568 5541 -97 9386 -3919 -2743 3623 1156 -6510 3163 -1222 8793 -7983 -9330 -8516 -7193 -4893 -3231 8158 4109 -5093 -4103 -5605 -9834 -4746 -5401 -7693 8147 -168 -9949 5454 3773 731 -639 3831 -3988 7501 1400 -8297 -6408 -4827 2651 4234 -5584 -2164 9687 -4629 -118 -5717 -2572 -3135 4214 -9642 7827 -1496 6651 3666 2960 917 829 -8794 5826 -1202 9580 625 -4743 7226 5193 9830 -3470 5626 -8199 -9963 6853 -155 -4868 4002 5336 -801 3992 -6716 -3397 -3873 8691 5689 -6581 -5977 -7054 7843 8106 -7817 -9353 437 1616 -3024 7834 -3059 -721 6980 2385 -7414 3239 9507 9388 4124 9506 -9510 -1893 -4308 -6449 9366 3998 8542 9527 -1862 -8566 312 9922 -515 -3109 -2338 5130 7219 3665 9246 1852 -6761 -7501 4186 5867 1279 6853 -4788 5677 -8531 5269 4241 -3631 8777 -3562 9728 -6223 8763 4475 -9687 8370 -5134 -4485 -9615 -7269 -5877 -6604 -5632 -4153 5524 -3406 -8624 8823 -4512 3999 226 9519 -1970 4792 -1447 610 6833 1463 -8856 -6670 -3133 4731 -5395 5364 9871 -3744 -613 1716 1182 17 9318 7980 -7810 2991 -1419 1326 -692 6387 5576 259 -3576 -8398 -9382 -2249 -8949 -6970 3890 3009 -4148 6079 -1272 -5605 -9261 724 -1336 5891 -2476 3395 3600 8798 -3023 -9723 -3238 -4143 1201 741 -8415 893 -8390 -7720 2778 -8194 -3557 3155 3967 -7992 -8261 -4861 3765 5996 9522 -5752 -3743 -4349 -8056 -1142 -3861 -7025 6969 2089 4784 1920 -3612 5445 5206 -7102 3791 -7737 -2858 -5572 4477 -3940 5998 4974 4497 -3572 8002 9205 -5574 7517 485 7339 -6452 9880 2431 4330 4034 5362 -1777 9800 1231 -9424 6015 979 -4865 172 4399 -6689 -6784 6115 3927 9440 -2170 -2868 -2569 5469 4598 1047 7199 -3394 -7372 8897 -6652 -9979 6909 7089 310 -5954 9807 7795 6646 -5075 -3663 3107 -6501 -1748 -6871 -2723 283 9705 5656 -5266 8513 -376 -9514 6851 2540 3708 -8901 5247 4359 -3650 -366 4380 4723 -8972 4798 5994 -7532 6840 -3425 5357 5223 -8803 162 -5354 777 -9009 -5560 -6538 -6165 7595 7553 -3781 -3129 2655 7481 2073 -9257 6220 -2914 9636 -5189 161 5751 -4510 -851 -6254 -9890 -8043 8178 4667 7709 -9596 -8373 -7036 178 9375 -4834 -8520 6053 7066 7106 6209 -2330 -3506 -2311 535 1647 -8150 -8053 -9497 7437 -5294 48 4932 7831 -4422 6708 -6634 3478 -7360 9842 5260 5252 8746 5744 -9336 7777 3872 5297 6503 -5247 4109 -9305 -3600 -3640 7069 -9763 280 5635 8347 610 -2180 7799 -6951 -7645 7359 6244 7638 -5010 -7587 7791 -3376 7296 -9865 -5139 7526 1730 9894 -997 8008 5867 -1384 7678 -1037 -4723 -1008 -7596 -5730 -9616 -798 -1033 -3552 -1836 752 -9572 -557 -388 -2449 -6218 3122 6078 7410 -4846 3455 8265 -130 -1894 6344 -5391 -458 6585 4941 -7936 -8416 1993 6356 -5333 3505 8274 4561 -2924 5915 8286 8778 3805 2946 3213 4327 -1768 -1883 5813 -1289 -1035 8561 7170 -712 1099 -1099 2226 -4550 -38 2034 4915 -9906 -7615 2181 -7703 7718 -9876 -9444 231 -853 -8921 -3464 -6460 3562 6192 5903 1688 -6607 -2062 -418 -5601 -9519 -5861 -4812 1609 6888 -121 9470 -415 -7656 8344 7258 4743 6279 9658 5457 -2423 6685 -5374 778 7667 -3540 2541 5192 -4900 2323 5194 -1573 -9444 4017 5749 429 427 -5529 9371 1742 8857 4244 -1473 818 -6934 3141 259 -8064 63 -5047 9538 -5967 2230 5980 -6395 2356 7115 1952 -6322 -6638 -7415 186 -1428 7990 -700 -3905 165 9678 -5127 3003 -9370 -8101 3277 687 9901 -4764 2753 -955 -7264 -1935 947 6518 5150 7567 449 -7186 3933 -619 2345 -2841 -2348 2850 -5417 7380 -6347".Split(' '), arrTemp => Convert.ToInt32(arrTemp))
    //     ;
    //     int res = maxSubsetSum(arr);
    //     Console.WriteLine(res);
    // }
}
